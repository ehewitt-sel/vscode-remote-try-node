grammar MiniLogo

entry Model: (stmts+=Stmt | defs+=Def)*;

Stmt: Cmd | Macro;
Cmd: Pen | Move | Color | For;
Macro: def=[Def:ID] '(' (args+=Expr (',' args+=Expr)*)? ')';

Def: 'def' name=ID '(' (params+=Param (',' params+=Param)*)? ')' Block;

fragment Block: '{' body+=Stmt* '}';

Param: name=ID;

Pen: 'pen' '(' mode=('up' | 'down') ')';
Move: 'move' '(' ex=Expr ',' ey=Expr ')';
For: 'for' var=Param '=' e1=Expr 'to' e2=Expr Block;
Color: 'color' '(' ((r=Expr ',' g=Expr ',' b=Expr) | color=ID | color=HEX) ')';

Expr: Add;
Add infers Expr:
    Mult ({infer BinExpr.e1=current} op=('+'|'-') e2=Mult)*;
Mult infers Expr:
    PrimExpr ({infer BinExpr.e1=current} op=('*'|'/') e2=PrimExpr)*;
PrimExpr: Lit | Ref | Group | NegExpr;
Lit: val=INT;
Ref: val=[Param:ID];
Group: '(' ge=Expr ')';
NegExpr: '-' ne=Expr;


terminal HEX returns string: /#(\d|[a-f][A-F])+/;
terminal ID returns string: /[_a-zA-z][\w_]*/;
terminal INT returns number: /~?[0-9]+/;

hidden terminal WS: /\s+/;
hidden terminal ML_COMMENT: /\/\*[\s\S]*?\*\//;
hidden terminal SL_COMMENT: /\/\/[^\n\r]*/;
